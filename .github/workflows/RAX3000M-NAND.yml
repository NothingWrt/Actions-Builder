#=================================================
#  RAX3000M NAND
#=================================================

name: RAX3000M NAND

on: 
  release:
    types: [published]
  push:
    branches: 
      - master
    paths:
      - 'RAX3000M-NAND.config'
  workflow_dispatch:
    inputs:
     trigger:
        description: Manually trigger
        required: true
        type: choice
        options:
         - release
#  schedule:
#    - cron: 0 20 1 * *
#  watch:
#    types: [started]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: 查看
      uses: actions/checkout@master

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "Deleting files, please wait ..."
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d/*
        #docker rmi `docker images -q`
        #sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        curl -fsSL https://raw.githubusercontent.com/NothingWrt/Actions-Builder/main/dotfiles/.bashrc >> ~/.bashrc
        sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

    - name: 克隆源代码
      env: 
        REPO_URL: https://github.com/NothingWrt/lede
        REPO_BRANCH: master
      run: git clone $REPO_URL -b $REPO_BRANCH openwrt 

    - name: 下载软件更新
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装软件更新
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      env:
        CONFIG_FILE: 'RAX3000M-NAND.config'
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt
        make defconfig

#    - name: SSH connection to Actions
#      uses: LEDE-Actions/debugger-action@master

    - name: 下载包
      run: |
        cd openwrt && make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 多线程编译
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc)

    - name: 单线程编译
      if: failure()
      run: |
        cd openwrt
        make -j1 V=s

#    - name: 上载bin目录
#      uses: actions/upload-artifact@master
#      if: always()
#      with:
#        name: OpenWrt_bin
#        path: openwrt/bin

    - name: 获取日期
      id: timestamp
      run: |
        export TZ='Asia/Shanghai'
        echo "date=$(date '+%Y-%m-%d-%H-%M-%S')" >> $GITHUB_OUTPUT

    - name: 整理档案
      id: organize_files
      if: always()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$(pwd)"
        echo "FIRMWARE=$(pwd)" >> $GITHUB_OUTPUT

    - name: 创建 Tag
      id: release_tag
      run: |
        git tag -a RAX3000M-${{ steps.timestamp.outputs.date }} -m "Release RAX3000M-${{ steps.timestamp.outputs.date }}" 
        git push --tags
        echo "tag_name=RAX3000M-${{ steps.timestamp.outputs.date }}" >> $GITHUB_OUTPUT

    - name: 生成 Release 信息
      id: info
      if: steps.build.outputs.status == 'success'
      run: |
          echo "${{ steps.release_tag.outputs.tag_name }}" >> release.txt
          echo "" >> release.txt
          echo "${{ secrets.RELEASE_INFO }}" >> release.txt
          echo "" >> release.txt
          echo "Build time: ${{ steps.timestamp.outputs.date }}" >> release.txt
          echo "Telegram: https://t.me/NothingWrt" >> release.txt
          touch release.txt
          echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件并发布 Release
      uses: softprops/action-gh-release@v1
      if: steps.info.outputs.status == 'success'
      env:
          GITHUB_TOKEN: ${{ secrets.G1THUB_TOKEN }}
      with:
          prerelease: ${{ secrets.PRERELEASE }}
          tag_name: ${{ steps.release_tag.outputs.tag_name }}
          body_path: release.txt
          files: ${{ steps.organize_files.outputs.FIRMWARE }}/*

        #    - name: 上载固件
        #uses: actions/upload-artifact@master
        #if: always()
        #with:
        #name: OpenWrt_firmware_${{ steps.timestamp.outputs.date }}
        #path: ${{ steps.organize_files.outputs.FIRMWARE }}

    - name: Telegram 通知
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
            Actions-Builder 编译完成！

            ${{ steps.release_tag.outputs.tag_name }}
           
            https://github.com/NothingWrt/Actions-Builder/releases/tag/${{ steps.release_tag.outputs.tag_name }}
